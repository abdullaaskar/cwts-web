---
import LanguagePicker from "./LanguagePicker.astro";
import { Icon } from "astro-icon";
import OptionalLink from "@components/common/OptionalLink.astro";
import NavbarBigDropdown from "./NavbarBigDropdown.astro";
import { default as menu, MenuItem } from "@data/menu";
import NavbarDropdown from "./NavbarDropdown.astro";

function isBigSubmenu(submenu: MenuItem): boolean {
  return (
    submenu.children != null &&
    submenu.children.length > 0 &&
    submenu.children[0]?.children != null &&
    submenu.children[0].children.length > 0
  );
}
---

<div id="menuContainer" class="group/menu">
  <div
    class:list={[
      // hidden in desktop view
      "lg:hidden",
      // Column of navbar and menu
      "flex flex-col",
      // bring to the top layer
      "z-50",
      // background color
      "bg-violet",
      // white text color and 18px font size
      "text-white text-lg",
      // fixed on the viewport
      "fixed",
      // tablet view sticky to the top, phone view sticky to the bottom
      "md:top-0 max-md:bottom-0",
      // different height in tablet and phone views when collapsed
      "md:max-h-12 max-h-16",
      // no scroll bar when collapsed
      "overflow-hidden",
      // when the menu is toggled on, set max height is full viewport. actual height is based on content
      "group-[.menu-on]/menu:max-h-full",
      // full width
      "w-full",
      // padding on left and right ends
      "px-6",
      // transition animation
      "transition-all motion-reduce:transition-none",
    ]}
  >
    <div
      class:list={[
        // flex row taking full width
        "flex w-full",
        // different height, should be consistant with max-height of parent when collapsed
        "md:h-12 h-16",
        // language picker and menu button should be at both end of the bar
        "justify-between",
        // in case they are not in same height, they should be aligned in the middle vertially
        "items-center",
        // no matter how parent changes the size, the bar size should stay the same
        "grow-0 shrink-0",
      ]}
    >
      <LanguagePicker />
      <div class="flex">
        <a id="menuToggler" class="cursor-pointer">
          目錄
          <Icon
            name="menu"
            class:list={[
              // show menu icon when collapsed
              "group-[.menu-on]/menu:hidden inline",
              // set similar size as text and align with text
              "h-5 align-text-bottom",
            ]}
          />
          <Icon
            name="close"
            class:list={[
              // show close icon when expanded
              "group-[.menu-on]/menu:inline hidden",
              // set similar size as text and align with text
              "h-5 align-text-bottom",
            ]}
          />
        </a>
      </div>
    </div>
    <div class="grow overflow-y-auto">
      {
        menu.map(
          (topItem) =>
            topItem.children && (
              <>
                <div class="group/submenu submenu-container first:border-t-0 border-t border-gray-300">
                  <div
                    class:list={[
                      "submenu-toggler",
                      "flex justify-between",
                      "py-2",
                      "text-2xl",
                    ]}
                  >
                    <div>
                      <OptionalLink link={topItem} />
                    </div>
                    <div>
                      <Icon
                        name="expand-circle-down"
                        class:list={[
                          // rotate up-side-down when expanded
                          "group-[.submenu-on]/submenu:rotate-180",
                          // set similar size as text and align with text
                          "h-7 align-text-bottom",
                        ]}
                      />
                    </div>
                  </div>
                  <div
                    class:list={[
                      "max-h-0 group-[.submenu-on]/submenu:max-h-[1000rem]",
                      "overflow-y-hidden",
                      "group-[.submenu-on]/submenu:transition-all motion-reduce:transition-none",
                    ]}
                  >
                    {topItem.children && (
                      <NavbarDropdown
                        items={topItem.children}
                        singleColumn={true}
                      />
                    )}
                  </div>
                </div>
              </>
            )
        )
      }
      {
        menu.map(
          (topItem) =>
            !topItem.children && (
              <>
                <div class="group/submenu submenu-container first:border-t-0 border-t border-gray-3">
                  <div
                    class:list={[
                      "submenu-toggler",
                      "flex justify-between",
                      "py-2",
                      "text-2xl",
                    ]}
                  >
                    <div>
                      <OptionalLink link={topItem} />
                    </div>
                  </div>
                </div>
              </>
            )
        )
      }
      <div>Menu footer</div>
    </div>
  </div>
  <div
    id="menuBack"
    class:list={[
      // hidden by default, show on menu is expanded
      "hidden group-[.menu-on]/menu:block",
      // take the full screen
      "fixed left-0 top-0 w-full h-full",
      // behind the menu but above everything else
      "z-40",
      // color and transparency
      "bg-black opacity-80",
    ]}
  >
  </div>
</div>
<script>
  import Toggler from "@scripts/toggle";
  const menuToggler = new Toggler(
    document.getElementById("menuContainer"),
    "menu-on"
  );
  menuToggler.attachToggler(document.getElementById("menuToggler"));
  menuToggler.attachCloser(document.getElementById("menuBack"));

  const submenuTogglerList: Toggler[] = [];
  document.querySelectorAll(".submenu-container").forEach((elem: Element) => {
    const submenuToggler = new Toggler(elem, "submenu-on");
    submenuTogglerList.push(submenuToggler);
    elem.querySelector(".submenu-toggler")?.addEventListener("click", () => {
      submenuToggler.toggle();
      submenuTogglerList.forEach((t) => {
        if (t != submenuToggler) t.off();
      });
    });
  });
</script>
